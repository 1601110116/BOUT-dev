# configuration file for BOUT++
# September 2008: Converted to use autoconf. Can be manually edited
# for the (very) rare occasions when autoconf fails

# extra compilation flags:
# -DCHECK      Enables a host of additional checks on each operation
#              such as uninitialised data. Helps when debugging
# -DTRACK      Keeps track of variable names.
#              Enables more useful error messages
# -DMETRIC3D   Metrics now become 3D (EXPERIMENTAL, INCOMPLETE)
# for SSE2: -msse2 -mfpmath=sse
# 
# This must also specify one or more file formats
# -DPDBF  PDB format (need to include pdb_format.cpp)
# -DNCDF  NetCDF format (nc_format.cpp)

# Created this variable so that a user won't overwrite the CFLAGS variable
# on the command line, just add to this one
BOUT_FLAGS		= $(CFLAGS) @CFLAGS@

# Specify the MPI C and C++ compilers in CXX and CC respectively

CC						= @MPICC@
CXX						= @MPICXX@

AR						= ar
RANLIB				= @RANLIB@
MKDIR					= @MKDIR@

####################################
# Do not need to alter anything below
####################################

LD						= $(CXX)

####################################
# Extra (optional) source files, includes and libs
# NOTE: EXTRA_SRC must include a solver (solver.cpp or ida_solver.cpp)
#       and a file format (nc_format.cpp or pdb_format.cpp)
####################################

EXTRA_INCS		= @EXTRA_INCS@
EXTRA_LIBS		= @EXTRA_LIBS@

@PETSC@

PVODE					= @PVODE@

SOLVER_SOURCE	= @SOLVER_SOURCE@
PRECON_SOURCE	= @PRECON_SOURCE@
FILEIO_SOURCE	= @FILEIO_SOURCE@

####################################
# These are used for compiling physics modules using BOUT++ library
####################################

# Files that are needed by configure and should be dependencies for 'all'

OBJ						= $(SOURCEC:%.cpp=%.o)
LIB						= $(BOUT_TOP)/lib/libbout++.a

# This doesn't include '-I$(BOUT_TOP)/include' because of the dependency checking
BOUT_INCLUDE	= -I. $(INCLUDE) $(EXTRA_INCS)
BOUT_LIBS			= -lm -L$(BOUT_TOP)/lib -lbout++ $(EXTRA_LIBS)

DEPS					= $(SOURCEC:.cpp=.d)
CHANGED				= $(shell find $(BOUT_TOP)/src -type f -name \*.cpp -or -name \*.h -newer $(LIB) -print 2> /dev/null)

# Need to use ifndef because TARGET could be set in a file (as opposed to the command line or environment variable)
# This will set a default if no TARGET is provided

ifndef TARGET
TARGET				= $(SOURCEC:%.cpp=%)
endif

@PETSC@

####################################
# Definining stuff for recursive make
####################################

# Phony targets since they are directory names
.PHONY: $(DIRS) lib

all: $(BOUT_TOP)/make.config $(DIRS) $(TARGET)

####################################
# Recursively run make through subdirs
####################################

$(DIRS):
	@$(MAKE) --no-print-directory -s -C $@ all

# Create 'lib' and 'include' incase they don't exist
$(BOUT_TOP)/include $(BOUT_TOP)/lib:
	$(MKDIR) $@

####################################
# A bit of a clever hack that determines wheter the TARGET variable is 'lib'
# then, if true, adds the .o files to libbout++.a, else, it links the .o's
# into an executable
####################################

ifeq ("$(TARGET)", "lib")
#BEGIN 'lib'

####################################
# The prerquisites of any .o file should depend on
# $(BOUT_TOP)/make.config
# $(BOUT_TOP)/makefile
# which are generated by configuration
####################################

-include $(DEPS)

# This automatically generates dependency rules
%.d : %.cpp
	-@$(CXX) $(BOUT_INCLUDE) $(BOUT_FLAGS) -MF"$@" -MG -MP -MM -MT"$@" -MT"$(<:.cpp=.o)" "$<"

####################################
# Notes about the different flags:
# -MF  write the generated dependency rule to a file
# -MG  assume missing headers will be generated and don't stop with an error
# -MM  generate dependency rule for prerequisite, skipping system headers
# -MP  add phony target for each header to prevent errors when header is missing
# -MT  add a target to the generated dependency
####################################

####################################
# Builds the library with $(OBJ) which is defined from the SOURCEC variable
####################################

lib: $(BOUT_TOP)/include $(BOUT_TOP)/lib $(OBJ)
ifneq ("$(OBJ)foo", "foo")
	@echo "Adding $(OBJ) to libbout++.a"
	@$(AR) cru $(LIB) $(OBJ)
	@$(RANLIB) $(LIB)
endif
ifneq ("$(SOURCEH)foo", "foo")
	@cp $(SOURCEH) $(BOUT_TOP)/include
endif

#END 'lib'
else


####################################
# Make libbout++.a if it doesn't exist with the checklib target
####################################
%.a:
	@echo "Rebuilding out-of-date bout++ library"
	@$(MAKE) -C $(BOUT_TOP)
 
####################################
# Make the target (e.g. gas_compress)
####################################
$(TARGET).cpp: checklib
$(TARGET).o: $(LIB)
$(TARGET): makefile $(BOUT_TOP)/make.config.in $(OBJ)
	@echo "  Linking" $(TARGET)
	@$(LD) -o $(TARGET) $(OBJ) $(BOUT_LIBS)

checklib:
ifneq ("$(CHANGED)foo", "foo")
	@echo "Rebuilding out-of-date bout++ library"
	@$(MAKE) -C $(BOUT_TOP)
endif

endif

%.o: $(BOUT_TOP)/make.config.in %.cpp
	@echo "  Compiling " $(@F:.o=.cpp)
	@$(CXX) $(BOUT_INCLUDE) -I$(BOUT_TOP)/include $(BOUT_FLAGS) -c $(@F:.o=.cpp) -o $@

####################################
# Clean target. Pretty self explanatory.
# NOTE: See that double colon (::) below? That's signifies a rule that can be added to later
# See:
# http://owen.sj.ca.us/~rk/howto/slides/make/slides/makecolon.html
####################################

clean::
	@-$(RM) $(OBJ) $(DEPS) $(TARGET)
	@for pp in $(DIRS); do echo "  " $$pp cleaned; $(MAKE) -C $$pp clean; done

distclean: clean
	@echo include cleaned
	@$(RM) -rf include
	@echo lib cleaned
	@$(RM) -rf lib
	-@$(RM) -rf externalpackages autom4te.cache

####################################
# Automatic re-running of configure if the configure.ac file has changed
####################################

$(BOUT_TOP)/configure: $(BOUT_TOP)/configure.ac
	@cd $(BOUT_TOP) && autoconf

$(BOUT_TOP)/make.config: $(BOUT_TOP)/make.config.in
	@cd $(BOUT_TOP); ./config.status > /dev/null
	
$(BOUT_TOP)/config.status: $(BOUT_TOP)/configure
	@cd $(BOUT_TOP) && ./config.status --recheck