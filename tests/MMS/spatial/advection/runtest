#!/usr/bin/env python3

# Python script to run and analyse MMS test
#
# Tests a range of different schemes
#

#requires: all_tests

from __future__ import division
from __future__ import print_function
from builtins import str
from builtins import range

from boututils.run_wrapper import shell, shell_safe, launch_safe, getmpirun
from boutdata.collect import collect

from numpy import array, log, pi

import argparse
import pickle

parser = argparse.ArgumentParser(description="Check the error scaling of bracket operators")
parser.add_argument("-p", "--plot", action="store_true",
                    help="Plot graphs of the errors")
parser.add_argument("-n", "--no-show", action="store_false", dest="show",
                    help="Don't show the plots, just save to file")

cli_args = parser.parse_args()

MPIRUN = getmpirun()

print("Making MMS steady-state advection test")
shell_safe("make > make.log")

# List of options to be passed for each test
options = [
    ("method=2", "Arakawa", "-^", 2),
    ("method=1 mesh:ddx:upwind=u1 mesh:ddz:upwind=u1", "1st order upwind", "-o", 1),
    ("method=1 mesh:ddx:upwind=u2 mesh:ddz:upwind=u2", "2nd order upwind", "-^", 2),
    ("method=1 mesh:ddx:upwind=u3 mesh:ddz:upwind=u3", "3nd order upwind", "-v", 3),
    ("method=1 mesh:ddx:upwind=c2 mesh:ddz:upwind=c2", "2nd order central", "-x", 2),
    ("method=1 mesh:ddx:upwind=c4 mesh:ddz:upwind=c4", "4th order central", "-+", 4),
    # NOTE: WENO3 seems to have two different regimes, one < 3, one >
    # 3, so it's possible to make it pass by judicious choice of grid
    # sizes, which is suspicious. It does seem to work correctly in
    # other contexts, so not overly worrying that it doesn't work
    # exactly as expected here
    # ("method=1 mesh:ddx:upwind=w3 mesh:ddz:upwind=w3", "3rd order WENO", "-s", 3),
]

# List of NX values to use
nxlist = [16, 32, 64, 128, 256]

nproc = 2
mthread = 2

success = True

err_2_all = []
err_inf_all = []
for opts, label, sym, exp_ord in options:
    error_2 = []  # The L2 error (RMS)
    error_inf = []  # The maximum error

    for nx in nxlist:
        # Set the X and Z mesh size
        dx = 2.*pi / (nx)

        args = opts + " mesh:nx="+str(nx+4)+" mesh:dx="+str(dx)+" MZ="+str(nx)

        print("  Running with " + args)

        # Delete old data
        shell("rm data/BOUT.dmp.*.nc")

        # Command to run
        cmd = "./advection "+args
        # Launch using MPI
        s, out = launch_safe(cmd, runcmd=MPIRUN, nproc=nproc,
                             mthread=mthread, pipe=True)

        # Save output to log file
        with open("run.log."+str(nx), "w") as f:
            f.write(out)

        l2 = collect("l_2", tind=-1, xguards=False,
                     yguards=False, info=False, path="data")
        linf = collect("l_inf", tind=-1, xguards=False,
                       yguards=False, info=False, path="data")

        error_2.append(l2)
        error_inf.append(linf)

        print("  -> Error norm: l-2 %f l-inf %f" % (l2, linf))

    # Append to list of all results
    err_2_all.append((error_2, label, sym))
    err_inf_all.append((error_inf, label, sym))

    # Calculate grid spacing
    dx = 1. / array(nxlist)

    # Calculate convergence order

    order = log(error_2[-1] / error_2[-2]) / log(dx[-1] / dx[-2])
    print("Convergence order = %f" % (order))

    if not (exp_ord + .2 > order > exp_ord - .2):
        success = False
        print("... Failure")
    else:
        print("... Success")

    # plot errors
    if cli_args.plot:
        import matplotlib.pyplot as plt
        plt.figure()

        plt.plot(dx, error_2, '-o', label=r'$l^2$')
        plt.plot(dx, error_inf, '-x', label=r'$l^\infty$')

        plt.plot(dx, error_2[-1]*(dx/dx[-1])**order,
                 '--', label="Order %.1f" % (order))

        plt.legend(loc="upper left")
        plt.grid()

        plt.yscale('log')
        plt.xscale('log')

        plt.xlabel(r'Mesh spacing $\delta x$')
        plt.ylabel("Error norm")

        if cli_args.show:
            plt.show()
        plt.savefig("{}_error_scaling.png".format(label.replace(" ", "_")))
        plt.close()

# Save the data
with open("advection.pkl", "wb") as output:
    pickle.dump(err_2_all, output)
    pickle.dump(err_inf_all, output)

# Plot all errors
if cli_args.plot:
    import matplotlib.pyplot as plt
    # Plot all results for comparison
    plt.figure()
    for e, label, sym in err_2_all:
        plt.plot(dx, e, sym, label=label)

    plt.legend(loc="upper left")
    plt.grid()
    plt.yscale('log')
    plt.xscale('log')

    plt.xlabel(r'Mesh spacing $\delta x$')
    plt.ylabel(r'$l_2$ error norm')
    plt.savefig("advection_norm_l2.png")
    if cli_args.show:
        plt.show()
    plt.close()

    ###

    plt.figure()
    for e, label, sym in err_inf_all:
        plt.plot(dx, e, sym, label=label)

    plt.legend(loc="upper left")
    plt.grid()
    plt.yscale('log')
    plt.xscale('log')

    plt.xlabel(r'Mesh spacing $\delta x$')
    plt.ylabel(r'$l_\infty$ error norm')
    plt.savefig("advection_norm_linf.png")
    if cli_args.show:
        plt.show()
    plt.close()


def print_error_rate(e, nxlist, dx):
    print("{}: {:>4} points | Error: {:f}".format(label, nxlist[i], e[i]), end="")
    if i > 0:
        print(" -> Rate {:f} ".format(log(e[i] / e[i-1]) / log(dx[i] / dx[i-1])))
    else:
        print()


print("\n\n==== l-infinity norm ====")
for e, label, sym in err_inf_all:
    for i in range(len(dx)):
        print_error_rate(e, nxlist, dx)

print("\n\n==== l-2 norm ====")
for e, label, sym in err_2_all:
    for i in range(len(dx)):
        print_error_rate(e, nxlist, dx)

if success:
    print(" => All tests passed")
    exit(0)
else:
    print(" => Some failed tests")
    exit(1)
