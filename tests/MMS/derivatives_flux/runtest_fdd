#!/usr/bin/env python3

import boutcore
import numpy as np

errorlist=""

boutcore.init("-d data -q -q -q".split(" "))


mmax=7
start=6
doPlot=False
nzs=np.logspace(start,mmax,num=mmax-start+1,base=2)
functions=[["1","sin(%s)","cos(%s)"] ,
           ["sin(%s)" , "sin(%s)", "sin(2*%s)"]]

derivatives=[[1,"U1"] , [2,"C2"] , [4,"C4"] , [1, "NND"]]

directions=[["x","2*pi",2 ,boutcore.FDDX],
            ["y","1"   ,2 ,boutcore.FDDY],
            ["z","1"   ,0 ,boutcore.FDDZ]]
for vs,fs, anas in functions:
  for order,diff in derivatives:
   for direction,fac,guards, diff_func in directions:
    errors=[]
    for nz in nzs:
        boutcore.setOption("meshD:nD".replace("D",direction)
                           ,"%d"% (nz+ (2*guards if direction == "x" else 0)))
        boutcore.setOption("meshD:dD".replace("D",direction)
                           ,"2*pi/(%d)"%(nz))
        dirnfac=direction+"*"+fac
        mesh=boutcore.Mesh(OptionSection="mesh"+direction)
        f=boutcore.create3D(fs.replace("%s",dirnfac)
                            ,mesh)
        v=boutcore.create3D(vs.replace("%s",dirnfac),mesh)
        sim=diff_func(v,f,method="DIFF_"+diff)
        ana=boutcore.create3D(anas.replace("%s",dirnfac),mesh)
        err=sim-ana
        err=err.getAll().flatten()
        if guards:
          err=err[guards:-guards]
        err=np.max(np.abs(err))
        errors.append(err)
    errc=np.log(errors[-2]/errors[-1])
    difc=np.log(nzs[-1]/nzs[-2])
    conv=errc/difc
    if order-.1 < conv < order+.1:
        #print("The convergence is: %f"%conv)
        fail=False
    else:
        print("%s %s - %s - %s"%(vs,fs,diff, direction))
        error="FDD%s is not working. Expected %f got %f\n"%(direction,order,conv)
        print(error)
        errorlist+=error
        fail=True
    if doPlot and fail:
        from matplotlib import pyplot as plt
        #plt.plot(1/np.array(nzs),errors,'-o')
        #plt.show()
        plt.plot((ana).getAll().flatten())
        plt.plot((sim).getAll().flatten())
        plt.show()

if errorlist != "":
    #print("Found errors:\n%s"%errorlist)
    exit(1)

#boutcore.finalise()
