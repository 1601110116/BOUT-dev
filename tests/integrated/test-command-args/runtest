#!/usr/bin/env python3
from boututils.run_wrapper import shell_safe

import os
import shutil
import unittest


class TestCommandLineArgs(unittest.TestCase):
    command = "./command-args 2>stderr.log"

    def makeDirAndCopyInput(self, path):
        os.mkdir(path)
        shutil.copy("BOUT.inp", path)

    def setUp(self):
        os.remove("stderr.log")
        shutil.rmtree("./data", ignore_errors=True)
        shutil.rmtree("./test", ignore_errors=True)
        shutil.rmtree("./test_copy", ignore_errors=True)

    def testNoArgumentsNoDirectory(self):
        with self.assertRaises(RuntimeError):
            shell_safe(self.command, pipe=True)
        with open("stderr.log") as f:
            contents = f.read()
            self.assertIn('"data" does not exist', contents,
                          msg="FAIL: Error message not printed when missing input directory")

    def testNoArgumentsDefaultDirectory(self):
        self.makeDirAndCopyInput("data")
        shell_safe(self.command, pipe=True)
        self.assertTrue(os.path.exists("data/BOUT.settings"),
                        msg="FAIL: No BOUT.settings file in data directory")
        self.assertTrue(os.path.exists("data/BOUT.log.0"),
                        msg="FAIL: No BOUT.log.0 file in data directory")

    def testShortLogArgument(self):
        self.makeDirAndCopyInput("data")
        shell_safe(self.command + " -l different.log", pipe=True)
        self.assertFalse(os.path.exists("data/BOUT.log.0"),
                         msg="FAIL: BOUT.log.0 file in data directory")
        self.assertTrue(os.path.exists("data/different.log.0"),
                        msg="FAIL: no different.log.0 file in data directory")

    def testLongLogArgument(self):
        self.makeDirAndCopyInput("data")
        shell_safe(self.command + " --log log", pipe=True)
        self.assertFalse(os.path.exists("data/BOUT.log.0"),
                         msg="FAIL: BOUT.log.0 file in data directory")
        self.assertTrue(os.path.exists("data/log.0"),
                        msg="FAIL: no log.0 file in data directory")

    def testDirectoryArgument(self):
        self.makeDirAndCopyInput("test")
        shell_safe(self.command + " -d test", pipe=True)
        self.assertTrue(os.path.exists("test/BOUT.settings"),
                        msg="FAIL: No BOUT.settings file in test directory")
        self.assertTrue(os.path.exists("test/BOUT.log.0"),
                        msg="FAIL: No BOUT.log.0 file in data directory")

    def testDirectoryArgumentOldSettingsFile(self):
        self.makeDirAndCopyInput("test")
        shell_safe(self.command + " -d test", pipe=True)
        shutil.copytree("test", "test_copy")
        shell_safe(self.command + " -d test_copy -f BOUT.settings -o testsettings", pipe=True)

        with open("test_copy/testsettings") as f:
            contents = f.read()
            self.assertIn("datadir = test_copy", contents,
                          msg="FAIL: datadir from command line clobbered by BOUT.settings")


if __name__ == "__main__":
    shell_safe("make")
    unittest.main(verbosity=2)
