#!/usr/bin/env python3

from boututils.datafile import DataFile
import itertools as it
import os
import time
import numpy as np
from boututils.run_wrapper import shell_safe as _shell_safe

#requires: all_tests
#requires: netcdf

class timer(object):

    def __init__(self, msg):
        self.msg = msg

    def __enter__(self):
        self.start = time.time()

    def __exit__(self, a, b, c):
        end = time.time()
        print("%12.8f %s" % (end - self.start, self.msg))


def shell_safe(cmd):
    with timer(cmd):
        _shell_safe(cmd)


def verify(f1, f2):
    with timer("verify %s %s" % (f1, f2)):
        d1 = DataFile(f1)
        d2 = DataFile(f2)
        for v in d1.keys():
            if d1[v].shape != d2[v].shape:
                raise RuntimeError("shape mismatch in ", v, d1[v], d2[v])
            if v in ["MXSUB", "MYSUB", "NXPE", "NYPE", "iteration"]:
                continue
            if not np.allclose(d1[v], d2[v]):
                # continue
                a = d1[v]
                b = d2[v]
                err = ""
                lst = [range(x) for x in d1[v].shape]
                for i in it.product(*lst):
                    if a[i] != b[i]:
                        err += str(i) + ":" + str(a[i]) + "!=" + str( b[i]) + """
"""
                # There are differences, but I think only guard cells are
                # affected
                raise RuntimeError("data mismatch in ", v, err, a, b)

shell_safe("make")

# Run once to get normal data
shell_safe("./squash -q -q -q nout=4")
shell_safe("mv data/BOUT.dmp.0.nc f1.nc")

# Parallel test
shell_safe("rm -f f2.nc")
shell_safe("mpirun -np 4 ./squash -q -q -q nout=4")
shell_safe("../../../bin/bout-squashoutput -qdcl 9 data --outputname ../f2.nc")

verify("f1.nc", "f2.nc")

# Parallel and in two pieces
shell_safe("rm -f f2.nc")
shell_safe("mpirun -np 4 ./squash -q -q -q")
shell_safe("../../../bin/bout-squashoutput -qdcl 9 data --outputname ../f2.nc")
shell_safe("mpirun -np 4 ./squash -q -q -q restart")
shell_safe("../../../bin/bout-squashoutput -qdcal 9 data --outputname ../f2.nc")

verify("f1.nc", "f2.nc")

# Parallel and in two pieces without dump_on_restart
shell_safe("rm -f f2.nc")
shell_safe("mpirun -np 4 ./squash -q -q -q")
shell_safe("../../../bin/bout-squashoutput -qdcl 9 data --outputname ../f2.nc")
shell_safe("mpirun -np 4 ./squash -q -q -q restart dump_on_restart=false")
shell_safe("../../../bin/bout-squashoutput -qdcal 9 data --outputname ../f2.nc")

verify("f1.nc", "f2.nc")

# Sequential test
shell_safe("rm -f f2.nc")
shell_safe("./squash -q -q -q nout=4")
shell_safe("../../../bin/bout-squashoutput -qdcl 9 data --outputname ../f2.nc")

verify("f1.nc", "f2.nc")
