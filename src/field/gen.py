print """// This file is autogenerated - see gen.py
#include <field3d.hxx>
#include <field2d.hxx>
#include <bout/mesh.hxx>
#include <globals.hxx>
"""

class Field:
    n=''
    d=[]
    i=''
    def __init__(self,name,dirs,idn):
        self.n=name
        self.d=dirs
        self.i=idn
    def get(self,name):
        if self.i=='real':
            return name
        elif self.i=='f2d':
            return '%s[i]'%name
        else:
            return '%s[i*nz+j]'%(name)

f3d =Field('Field3D' ,['x','y','z'],'f3d')
f2d =Field('Field2D' ,['x','y'    ],'f2d')
real=Field('BoutReal',[           ],'real')
fields=[f3d,f2d,real]
#field_names={'f3d':'Field3D',
#             'f2d':'Field2D'}
import sys
def mymax(f1,f2):
    if f1.i==f2.i:
        return f1
    elif f1.i == 'real':
        return f2
    elif f2.i == 'real':
        return f1
    else:
        return f3d
#dirs={'f3d':['x','y','z'],
#      'f2d':['x','y']}
ops=['*','/','+','-']
op_names={'*':'mul',
          '/':'div',
          '-':'minus',
          '+':'plus'}
for lhs in fields:
    #lhsn=field_names[lhs]
    for rhs in fields:
        if lhs.i == rhs.i == 'real':
            continue
        #rhsn=field_names[rhs]
        out=mymax(rhs,lhs)
        #outn=field_names[out]
        for op in ops:
            opn=op_names[op]
            print 'void autogen_%s_%s_%s_%s('%(out.n,lhs.n,rhs.n,opn),
            const=''
            fs=[out,lhs,rhs]
            fn=['result','lhs','rhs']
            for f in range(len(fs)):
                print const,"BoutReal",
                if fs[f].i != 'real':
                    print "*",
                print fn[f],",",
                const='const'
            print'int max',
            if (lhs != rhs):
                print ', int nz',
            print '){'
            if (lhs != rhs):
                print '  max/=nz;'
            print '  for (int i=0;i<max;++i){'
            if (lhs != rhs):
                print "    for (int j=0;j<nz;++j){"
                print "      result[i*nz+j]=",
                print lhs.get('lhs'),
                # if lhs.i == 'f2d':
                #     print "lhs[i]",
                # elif lhs.i == 'real':
                #     print "lhs"
                # else:
                #     print "lhs[i*nz+j]",
                print op,
                print rhs.get('rhs'),
                print ";"
                # if rhs.i == 'f2d':
                #     print "rhs[i];"
                # else:
                #     print "rhs[i*nz+j];"
                print "    }"
            else:
                print "    result[i]=lhs[i]%srhs[i];"%op
            print "  }"
            print "}"
            print
            print "const %s operator%s(const %s & lhs,const %s & rhs){"%(out.n,op,lhs.n,rhs.n)
            print "  Indices i{0,0,0};"
            print "  %s result;"%(out.n)
            print "  result.allocate();"
            print "  "
            print "  autogen_%s_%s_%s_%s("%(out.n,lhs.n,rhs.n,opn),
            for f in range(len(fn)):
                if fs[f].i=='real':
                    print "%s,"%fn[f]
                else:
                    print "&%s[i],"%fn[f],
            m=''
            for d in out.d:
                print m,"mesh->LocalN%s"%d,
                m='*'
            if (lhs != rhs):
                print "\n     ,mesh->LocalNz",
            print ");"
            print "  return result;"
            print "}"
