#!/usr/bin/env python

#
# Run the test, compare results against the benchmark
#

from boututils import shell,launch,getmpirun
from boutdata import collect
from numpy import sqrt, max, abs, mean, array, log, pi, polyfit, meshgrid, exp, sin, cos
from sys import stdout, exit
import matplotlib.pyplot as plt

# List of NX values to use
nxlist = [16, 32, 64, 128, 256, 512]

nproc = 1

varlist = ['a', 'b', 'c']  # Variables to compare
markers = ['bo', 'r^', 'kx']
labels = [r'$a$', r'$b$', r'$c$']

MPIRUN=getmpirun()

print "Making Interpolation test"
shell("make > make.log")

print "Running Interpolation test"
success = True

error_2 = {}
error_inf = {}
for var in varlist:
    error_2[var] = []             # L2 error (RMS)
    error_inf[var] = []           # Maximum error

for nx in nxlist:
    dx = 1. / (nx)

    args = " mesh:nx="+str(nx+4)+" mesh:dx="+str(dx)+" MZ="+str(nx)

    cmd = "./test_interpolate"+args

    shell("rm data/BOUT.dmp.*.nc")

    s, out = launch(cmd, runcmd=MPIRUN, nproc=nproc, pipe=True)
    with open("run.log."+str(nx), "w") as f:
        f.write(out)

     # Collect output data
    for var in varlist:
        initial = collect(var, path="data", xguards=False, info=False)
        interp = collect(var+"_interp", path="data", xguards=False, info=False)
        solution = collect(var+"_solution", path="data", xguards=False, info=False)

        E = interp - solution

        l2 = sqrt(mean(E**2))
        linf = max(abs(E))

        error_2[var].append( l2 )
        error_inf[var].append( linf )

        print("%s : l-2 %f l-inf %f" % (var, l2, linf))

dx = 1./array(nxlist)

# plot errors
plt.figure()

# Calculate convergence order
for var,mark,label in zip(varlist, markers, labels):
    plt.plot(dx, error_2[var], '-'+mark, label=label)
    plt.plot(dx, error_inf[var], '--'+mark)

    fit = polyfit(log(dx), log(error_2[var]), 1)
    order = fit[0]
    stdout.write("%s Convergence order = %f" % (var, order))

    if order < 2.5: # Should be third order accurate
        print("............ FAIL")
        success = False
    else:
        print("............ PASS")

plt.legend(loc="upper left")
plt.grid()

plt.yscale('log')
plt.xscale('log')

plt.xlabel(r'Mesh spacing $\delta x$')
plt.ylabel("Error norm")

plt.savefig("norm.pdf")

plt.show()
plt.close()

if success:
    print " => All Interpolation tests passed"
    exit(0)
else:
    print " => Some failed tests"
    exit(1)
