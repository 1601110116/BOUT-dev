# settings file for BOUT++
# High-Beta reduced MHD case

##################################################
# Global settings used by the core code

NOUT = 1          # number of time-steps
TIMESTEP = 1e-2       # time between outputs

ShiftXderivs = true # use shifted radial derivatives?
TwistShift = true   # use twist-shift condition?
ShiftOrder = 0      # interpolation order (1 = nearest neighbour, 0=FFT)
TwistOrder = 0      # order of twist-shift interpolation

MZ = 17             # number of points in z direction (2^n + 1)
ZPERIOD = 1         # Fraction of a torus to simulate

MXG = 2
MYG = 2

grid = "grid.nc"  # Grid file

StaggerGrids = false    # Use staggered grids (EXPERIMENTAL)

[mesh]
symmetricGlobalX = true

[output]
floats = false # -> Output in double precision

##################################################
# Laplacian inversion routines

[laplace]
all_terms = true

##################################################
# derivative methods

[ddx]

first = C4  # order of first x derivatives (options are 2 or 4)
second = C4 # order of second x derivatives (2 or 4)
upwind = W3 # order of upwinding method (1, 4, 0 = TVD (DO NOT USE), 3 = WENO)

[ddy]

first = C4
second = C4
upwind = W3

[ddz]

first = C4  # Z derivatives can be done using FFT
second = C4
upwind = W3

##################################################
# Solver settings

[solver]

mms = true

# mudq, mldq, mukeep, mlkeep preconditioner options
ATOL = 1.0e-12 # absolute tolerance
RTOL = 1.0e-8  # relative tolerance

use_precon = false    # Use preconditioner: User-supplied or BBD
use_jacobian = false  # Use user-supplied Jacobian

mxstep = 5000   # Number of internal steps between outputs

##################################################
# settings for high-beta reduced MHD

[highbeta]

density = 1.0e19       # number density of deuterium [m^-3]
                       # used to produce output normalisations

## Effects to include/exclude

include_jpar0 = true     # determines whether to include jpar0 terms
include_curvature = true # include curvature drive term?

compress = false       # set compressible (evolve Vpar)
nonlinear  = false     # include non-linear terms?

diamag = false         # Include diamagnetic effects?
diamag_grad_t = false  # Include Grad_par(Te) term in Psi equation
diamag_phi0 = false    # Balance ExB against Vd for stationary equilibrium

##################################################
# BRACKET_METHOD flags:
# 0:BRACKET_STD; derivative methods will be determined 
#   by the choices C or W in this input file
# 1:BRACKET_SIMPLE; 2:BRACKET_ARAKAWA; 3:BRACKET_CTU.

bm_exb_flag = 0
bm_mag_flag = 2

##################################################################

eHall = false         # Include electron pressue effects in Ohm's law?
AA    = 2.0          # ion mass in units of proton mass 

## Toroidal filtering
filter_z = false   # remove all except one mode
filter_z_mode = 1  # Specify which harmonic to keep (1 = fundamental)

low_pass_z = -1    # Keep up to and including this harmonic (-1 = keep all)
zonal_flow = -1    # remove this zonal harmonic  (-1 = keep zonal harmonic)
zonal_field= -1     # remove this zonal harmonic  (-1 = keep zonal harmonic)
zonal_bkgd = -1    # remove this zonal harmonic  (-1 = keep zonal harmonic)

## Vacuum region control

vacuum_pressure = 0.0 # the pressure below which it is considered vacuum
                       # fraction of peak pressure
vacuum_trans = 0.01   # transition width (fraction of P)

## Resistivity and Hyper-resistivity

vac_lund = -1.0e8    # Lundquist number in vacuum  (negative -> infinity)
core_lund = 1e1  # Lundquist number in core (negative -> infinity)
hyperresist = 1.e-4 # Hyper-resistivity coefficient (like 1 / Lundquist number)

## Parallel pressure diffusion

diffusion_par = -1.0e-0   # Parallel pressure diffusion (< 0 = none)

## Viscosity and Hyper-viscosity

viscos_par = -0.1   # Parallel viscosity (< 0 = none)
viscos_perp = -1.0  # Perpendicular

## Compressional terms (only when compress = true)
phi_curv = true    # Include curvature*Grad(phi) in P equation
# gamma = 1.6666

## field inversion flags
phi_flags = 0

##################################################
# settings for individual variables
# The section "All" defines default settings for all variables
# These can be overridden for individual variables in
# a section of that name.

[All]
scale = 0.0 # default size of initial perturbations

[phi]

solution = (sin(t - x + z + (x^2 + 2)*(y + 0.1*sin(y))) + 0.001*cos(-y + z + (x^2 + 2)*(y + 0.1*sin(y))))*sin(6.28318530717959*x)

source = 360.0*x*(y + 0.1*sin(y))*((1.125*x*(y + 0.1*sin(y))*cos(-y + z + (x^2 + 2)*(y + 0.1*sin(y))) + (1125.0*x*(y + 0.1*sin(y)) - 562.5)*sin(t - x + z + (x^2 + 2)*(y + 0.1*sin(y))))*sin(6.28318530717959*x) + 3534.29173528852*(0.001*sin(-y + z + (x^2 + 2)*(y + 0.1*sin(y))) - cos(t - x + z + (x^2 + 2)*(y + 0.1*sin(y))))*cos(6.28318530717959*x))/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2) - 180.0*x*((-1.125*x*(y + 0.1*sin(y))*sin(-y + z + (x^2 + 2)*(y + 0.1*sin(y))) + (1125.0*x*(y + 0.1*sin(y)) - 562.5)*cos(t - x + z + (x^2 + 2)*(y + 0.1*sin(y))))*sin(6.28318530717959*x) + 3534.29173528852*(sin(t - x + z + (x^2 + 2)*(y + 0.1*sin(y))) + 0.001*cos(-y + z + (x^2 + 2)*(y + 0.1*sin(y))))*cos(6.28318530717959*x))/((x^2 + 2)^3*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2) - (202500.0*x^2*(y + 0.1*sin(y))^2/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2) + 6.25*(x^2 + 2)^2*(4.0/(-0.2*cos(y) + 2)^2 + 0.16/((x^2 + 2)^2*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2))*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2)*(sin(t - x + z + (x^2 + 2)*(y + 0.1*sin(y))) + 0.001*cos(-y + z + (x^2 + 2)*(y + 0.1*sin(y))))*sin(6.28318530717959*x) - 2.0*sin(2*t)*cos(x + 4*y - z - (x^2 + 2)*(y + 0.1*sin(y))) + 2.0*(-0.001*sin(-y + z + (x^2 + 2)*(y + 0.1*sin(y))) + cos(t - x + z + (x^2 + 2)*(y + 0.1*sin(y))))*(101250.0*x^2*(y + 0.1*sin(y))/((x^2 + 2)^2*(0.1*cos(y) + 1)) + 1.25*(x^2 + 2)^2*(-0.2*cos(y) + 2)^3*(0.1*cos(y) + 1)*sin(y) - 3.75*(x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2*sin(y) - 50625.0*(y + 0.1*sin(y))/((x^2 + 2)*(0.1*cos(y) + 1)))*sin(6.28318530717959*x)/((x^2 + 2)*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)) - 0.16*(7068.58347057703*(1.125*x*(y + 0.1*sin(y))*sin(-y + z + (x^2 + 2)*(y + 0.1*sin(y))) - (1125.0*x*(y + 0.1*sin(y)) - 562.5)*cos(t - x + z + (x^2 + 2)*(y + 0.1*sin(y))))*cos(6.28318530717959*x) + 12491218.0701287*(sin(t - x + z + (x^2 + 2)*(y + 0.1*sin(y))) + 0.001*cos(-y + z + (x^2 + 2)*(y + 0.1*sin(y))))*sin(6.28318530717959*x) + (1265.625*x^2*(y + 0.1*sin(y))^2*cos(-y + z + (x^2 + 2)*(y + 0.1*sin(y))) + 632.8125*(y + 0.1*sin(y))*sin(-y + z + (x^2 + 2)*(y + 0.1*sin(y))) - (632812.5*y + 63281.25*sin(y))*cos(t - x + z + (x^2 + 2)*(y + 0.1*sin(y))) + (1125.0*x*(y + 0.1*sin(y)) - 562.5)^2*sin(t - x + z + (x^2 + 2)*(y + 0.1*sin(y))))*sin(6.28318530717959*x))/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2)

bndry_all = dirichlet_o2(phi:solution)

[J]
solution = 6.4e-5*x^2*(y + 0.1*sin(y))*(632812.5*y + 63281.25*sin(y) + 2531250.0)*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2) + 0.018*x*(1125.0*x*(y + 0.1*sin(y)) + 4500.0*x)*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)^3*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2) - 0.0001*(202500.0*x^2*(y + 0.1*sin(y))^2/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2) + 6.25*(x^2 + 2)^2*(4.0/(-0.2*cos(y) + 2)^2 + 0.16/((x^2 + 2)^2*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2))*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2)*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))) - 0.0002*(101250.0*x^2*(y + 0.1*sin(y))/((x^2 + 2)^2*(0.1*cos(y) + 1)) + 1.25*(x^2 + 2)^2*(-0.2*cos(y) + 2)^3*(0.1*cos(y) + 1)*sin(y) - 3.75*(x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2*sin(y) - 50625.0*(y + 0.1*sin(y))/((x^2 + 2)*(0.1*cos(y) + 1)))*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)) - 0.16*(3.16049382716049e-6*x^2*(632812.5*y + 63281.25*sin(y) + 2531250.0)*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))) + sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))))*(63.28125*y + 6.328125*sin(y) + 253.125)/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2)

bndry_all = dirichlet_o2(J:solution)

[Psi]  # Vector potential
solution = 0.0001*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))

ddx = -0.0001*(1125.0*x*(y + 0.1*sin(y)) + 4500.0*x)*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))

ddy = -0.0001*((x^2 + 2)*(0.1*cos(y) + 1) - 1)*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))

source = -6.4e-6*x^2*(y + 0.1*sin(y))*(632812.5*y + 63281.25*sin(y) + 2531250.0)*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2) - 0.0018*x*(1125.0*x*(y + 0.1*sin(y)) + 4500.0*x)*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)^3*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2) + 1.0e-5*(202500.0*x^2*(y + 0.1*sin(y))^2/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2) + 6.25*(x^2 + 2)^2*(4.0/(-0.2*cos(y) + 2)^2 + 0.16/((x^2 + 2)^2*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2))*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2)*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))) + 2.0e-5*(101250.0*x^2*(y + 0.1*sin(y))/((x^2 + 2)^2*(0.1*cos(y) + 1)) + 1.25*(x^2 + 2)^2*(-0.2*cos(y) + 2)^3*(0.1*cos(y) + 1)*sin(y) - 3.75*(x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2*sin(y) - 50625.0*(y + 0.1*sin(y))/((x^2 + 2)*(0.1*cos(y) + 1)))*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)) + 0.016*(3.16049382716049e-6*x^2*(632812.5*y + 63281.25*sin(y) + 2531250.0)*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))) + sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))))*(63.28125*y + 6.328125*sin(y) + 253.125)/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2) + 2.0*((x^2 + 2)*(0.1*cos(y) + 1)*cos(t - x + z + (x^2 + 2)*(y + 0.1*sin(y))) - 0.001*((x^2 + 2)*(0.1*cos(y) + 1) - 1)*sin(-y + z + (x^2 + 2)*(y + 0.1*sin(y))))*sin(6.28318530717959*x)/sqrt((x^2 + 2)^2*(4.0/(-0.2*cos(y) + 2)^2 + 0.16/((x^2 + 2)^2*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2))*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2)

bndry_all = dirichlet_o2(Psi:solution)

[U]   # vorticity
solution = 2.0*sin(2*t)*cos(x + 4*y - z - (x^2 + 2)*(y + 0.1*sin(y)))

ddx = -2.0*(-1125.0*x*(y + 0.1*sin(y)) + 562.5)*sin(2*t)*sin(x + 4*y - z - (x^2 + 2)*(y + 0.1*sin(y)))

ddy = -2.0*(-(x^2 + 2)*(0.1*cos(y) + 1) + 4)*sin(2*t)*sin(x + 4*y - z - (x^2 + 2)*(y + 0.1*sin(y)))

source = 1.0*(-0.005*sin(t)*cos(-y + z + (x^2 + 2)*(y + 0.1*sin(y))) - sin(-3.0*x^2 + 2*z + 2*(x^2 + 2)*(y + 0.1*sin(y)))*cos(t))*cos(y)/(-0.2*cos(y) + 2)^2 + 4.0*cos(2*t)*cos(x + 4*y - z - (x^2 + 2)*(y + 0.1*sin(y))) + 2.0*(4.0/(-0.2*cos(y) + 2)^2 + 0.16/((x^2 + 2)^2*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2))*(-6.4e-5*x^2*(y + 0.1*sin(y))*((x^2 + 2)*(0.1*cos(y) + 1) - 1)*(632812.5*y + 63281.25*sin(y) + 2531250.0)*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2) + 6.4e-5*x^2*(y + 0.1*sin(y))*(63281.25*cos(y) + 632812.5)*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2) + 1.28e-5*x^2*(y + 0.1*sin(y))*(632812.5*y + 63281.25*sin(y) + 2531250.0)*sin(y)*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^3) - 2.56e-5*x^2*(y + 0.1*sin(y))*(632812.5*y + 63281.25*sin(y) + 2531250.0)*sin(y)*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)^2*(-0.2*cos(y) + 2)^3*(0.1*cos(y) + 1)^2) + 6.4e-5*x^2*(632812.5*y + 63281.25*sin(y) + 2531250.0)*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)) + 20.25*x^2*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)^3*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)) + 0.018*x*(1125.0*x*(y + 0.1*sin(y)) + 4500.0*x)*((x^2 + 2)*(0.1*cos(y) + 1) - 1)*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)^3*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2) + 0.0036*x*(1125.0*x*(y + 0.1*sin(y)) + 4500.0*x)*sin(y)*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)^3*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^3) - 0.0072*x*(1125.0*x*(y + 0.1*sin(y)) + 4500.0*x)*sin(y)*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)^3*(-0.2*cos(y) + 2)^3*(0.1*cos(y) + 1)^2) + 0.0001*((x^2 + 2)*(0.1*cos(y) + 1) - 1)*(202500.0*x^2*(y + 0.1*sin(y))^2/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2) + 6.25*(x^2 + 2)^2*(4.0/(-0.2*cos(y) + 2)^2 + 0.16/((x^2 + 2)^2*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2))*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2)*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))) - 0.0001*(40500.0*x^2*(y + 0.1*sin(y))^2*sin(y)/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^3) - 81000.0*x^2*(y + 0.1*sin(y))^2*sin(y)/((x^2 + 2)^2*(-0.2*cos(y) + 2)^3*(0.1*cos(y) + 1)^2) + 202500.0*x^2*(y + 0.1*sin(y))*(0.2*cos(y) + 2)/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2) - 1.25*(x^2 + 2)^2*(4.0/(-0.2*cos(y) + 2)^2 + 0.16/((x^2 + 2)^2*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2))*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)*sin(y) + 2.5*(x^2 + 2)^2*(4.0/(-0.2*cos(y) + 2)^2 + 0.16/((x^2 + 2)^2*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2))*(-0.2*cos(y) + 2)*(0.1*cos(y) + 1)^2*sin(y) + 6.25*(x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2*(-1.6*sin(y)/(-0.2*cos(y) + 2)^3 + 0.032*sin(y)/((x^2 + 2)^2*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^3) - 0.128*sin(y)/((x^2 + 2)^2*(-0.2*cos(y) + 2)^5*(0.1*cos(y) + 1)^2)))*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))) - 0.0002*((x^2 + 2)*(0.1*cos(y) + 1) - 1)*(101250.0*x^2*(y + 0.1*sin(y))/((x^2 + 2)^2*(0.1*cos(y) + 1)) + 1.25*(x^2 + 2)^2*(-0.2*cos(y) + 2)^3*(0.1*cos(y) + 1)*sin(y) - 3.75*(x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2*sin(y) - 50625.0*(y + 0.1*sin(y))/((x^2 + 2)*(0.1*cos(y) + 1)))*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)) - 0.0002*(10125.0*x^2*(y + 0.1*sin(y))*sin(y)/((x^2 + 2)^2*(0.1*cos(y) + 1)^2) + 101250.0*x^2/(x^2 + 2)^2 + 1.25*(x^2 + 2)^2*(-0.2*cos(y) + 2)^3*(0.1*cos(y) + 1)*cos(y) - 0.125*(x^2 + 2)^2*(-0.2*cos(y) + 2)^3*sin(y)^2 - 3.75*(x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2*cos(y) + 1.5*(x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)*sin(y)^2 - 1.5*(x^2 + 2)^2*(-0.2*cos(y) + 2)*(0.1*cos(y) + 1)^2*sin(y)^2 - 5062.5*(y + 0.1*sin(y))*sin(y)/((x^2 + 2)*(0.1*cos(y) + 1)^2) - 50625.0/(x^2 + 2))*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)) - 2.0e-5*(101250.0*x^2*(y + 0.1*sin(y))/((x^2 + 2)^2*(0.1*cos(y) + 1)) + 1.25*(x^2 + 2)^2*(-0.2*cos(y) + 2)^3*(0.1*cos(y) + 1)*sin(y) - 3.75*(x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2*sin(y) - 50625.0*(y + 0.1*sin(y))/((x^2 + 2)*(0.1*cos(y) + 1)))*sin(y)*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2) + 8.0e-5*(101250.0*x^2*(y + 0.1*sin(y))/((x^2 + 2)^2*(0.1*cos(y) + 1)) + 1.25*(x^2 + 2)^2*(-0.2*cos(y) + 2)^3*(0.1*cos(y) + 1)*sin(y) - 3.75*(x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2*sin(y) - 50625.0*(y + 0.1*sin(y))/((x^2 + 2)*(0.1*cos(y) + 1)))*sin(y)*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))/((x^2 + 2)*(-0.2*cos(y) + 2)^3*(0.1*cos(y) + 1)) - 0.16*(3.16049382716049e-6*x^2*(632812.5*y + 63281.25*sin(y) + 2531250.0)*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))) + sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))))*(6.328125*cos(y) + 63.28125)/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2) - 0.032*(3.16049382716049e-6*x^2*(632812.5*y + 63281.25*sin(y) + 2531250.0)*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))) + sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))))*(63.28125*y + 6.328125*sin(y) + 253.125)*sin(y)/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^3) + 0.064*(3.16049382716049e-6*x^2*(632812.5*y + 63281.25*sin(y) + 2531250.0)*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))) + sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))))*(63.28125*y + 6.328125*sin(y) + 253.125)*sin(y)/((x^2 + 2)^2*(-0.2*cos(y) + 2)^3*(0.1*cos(y) + 1)^2) - 0.16*(63.28125*y + 6.328125*sin(y) + 253.125)*(-3.16049382716049e-6*x^2*((x^2 + 2)*(0.1*cos(y) + 1) - 1)*(632812.5*y + 63281.25*sin(y) + 2531250.0)*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))) + 3.16049382716049e-6*x^2*(63281.25*cos(y) + 632812.5)*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))) + ((x^2 + 2)*(0.1*cos(y) + 1) - 1)*cos(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))))/((x^2 + 2)^2*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)^2))/sqrt((x^2 + 2)^2*(4.0/(-0.2*cos(y) + 2)^2 + 0.16/((x^2 + 2)^2*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2))*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2) - 4.0*((-3534.29173528852*sin(3.14159265358979*x)*cos(3.14159265358979*x)*cos(y) - 562.5)*(-2.5e-5*(x^2 + 2)^2*(4.0/(-0.2*cos(y) + 2)^2 + 0.16/((x^2 + 2)^2*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2))*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))) + 0.0001*(x^2 + 2)*((x^2 + 2)*(0.1*cos(y) + 1) - 1)*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y)))) + (0.1125*x*(x^2 + 2)*(y + 0.1*sin(y))*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))) - 0.0001*(x^2 + 2)*(1125.0*x*(y + 0.1*sin(y)) + 4500.0*x)*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)*sin(4.0*x^2 - y + z + (x^2 + 2)*(y + 0.1*sin(y))))*sin(3.14159265358979*x)^2*sin(y))*(4.0/(-0.2*cos(y) + 2)^2 + 0.16/((x^2 + 2)^2*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2))/(sqrt((x^2 + 2)^2*(4.0/(-0.2*cos(y) + 2)^2 + 0.16/((x^2 + 2)^2*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2))*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2)*(x^2 + 2)*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1))

bndry_all = dirichlet_o2(U:solution)

[P]  # pressure

solution = -0.005*sin(t)*sin(-y + z + (x^2 + 2)*(y + 0.1*sin(y))) + 0.5*cos(t)*cos(-3.0*x^2 + 2*z + 2*(x^2 + 2)*(y + 0.1*sin(y))) + 1

ddx = -5.625*x*(y + 0.1*sin(y))*sin(t)*cos(-y + z + (x^2 + 2)*(y + 0.1*sin(y))) - 0.5*(2250.0*x*(y + 0.1*sin(y)) - 3375.0*x)*sin(-3.0*x^2 + 2*z + 2*(x^2 + 2)*(y + 0.1*sin(y)))*cos(t)

ddy = -1.0*(x^2 + 2)*(0.1*cos(y) + 1)*sin(-3.0*x^2 + 2*z + 2*(x^2 + 2)*(y + 0.1*sin(y)))*cos(t) - 0.005*((x^2 + 2)*(0.1*cos(y) + 1) - 1)*sin(t)*cos(-y + z + (x^2 + 2)*(y + 0.1*sin(y)))

source = -0.5*sin(t)*cos(-3.0*x^2 + 2*z + 2*(x^2 + 2)*(y + 0.1*sin(y))) - 0.005*sin(-y + z + (x^2 + 2)*(y + 0.1*sin(y)))*cos(t) - 7068.58347057703*(0.25*(x^2 + 2)^2*(4.0/(-0.2*cos(y) + 2)^2 + 0.16/((x^2 + 2)^2*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2))*(-0.001*sin(-y + z + (x^2 + 2)*(y + 0.1*sin(y))) + cos(t - x + z + (x^2 + 2)*(y + 0.1*sin(y))))*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2*sin(6.28318530717959*x) - (x^2 + 2)*((x^2 + 2)*(0.1*cos(y) + 1)*cos(t - x + z + (x^2 + 2)*(y + 0.1*sin(y))) - 0.001*((x^2 + 2)*(0.1*cos(y) + 1) - 1)*sin(-y + z + (x^2 + 2)*(y + 0.1*sin(y))))*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1)*sin(6.28318530717959*x))*sin(3.14159265358979*x)/(sqrt((x^2 + 2)^2*(4.0/(-0.2*cos(y) + 2)^2 + 0.16/((x^2 + 2)^2*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2))*(-0.2*cos(y) + 2)^4*(0.1*cos(y) + 1)^2)*(x^2 + 2)*(-0.2*cos(y) + 2)^2*(0.1*cos(y) + 1))

bndry_all = dirichlet_o2(P:solution)

[Vpar]



