#!/usr/bin/env python

# Python script to run and analyse MMS test
#
# Tests a range of different schemes
#

from __future__ import division

from boututils import shell,launch,getmpirun, DataFile
from boutdata import collect

from numpy import sqrt, max, abs, mean, array, log, pi

from os.path import join, isfile

import matplotlib.pyplot as plt


## Get the tokamak shape
## Note: This must be the same as in the mms.py code
from boutdata.mms import SimpleTokamak
shape = SimpleTokamak()

MPIRUN = getmpirun()

print("Making MMS tokamak geometry test")
shell("make > make.log")

# List of NX values to use
nxlist = [4, 8, 16, 32, 64]#, 128, 256]

nproc = 1

success = True

error_2   = []  # The L2 error (RMS)
error_inf = []  # The maximum error

for nx in nxlist:
    # Generate a new mesh file
    
    filename = "grid%d.nc" % nx
    
    if isfile(filename):
        print("Grid file '%s' already exists" % filename)
    else:
        print("Creating grid file '%s'" % filename)
        f = DataFile(filename, create=True)
        shape.write(nx,nx, f)
        f.close()
    
    args = " MZ="+str(nx)+" grid="+filename #+" solver:timestep="+str(0.1/nx)
        
    print("  Running with " + args)

    # Delete old data
    shell("rm data/BOUT.dmp.*.nc")
        
    # Command to run
    cmd = "./tokamak "+args
    # Launch using MPI
    s, out = launch(cmd, runcmd=MPIRUN, nproc=nproc, pipe=True)
        
    # Save output to log file
    f = open("run.log."+str(nx), "w")
    f.write(out)
    f.close()
    
    # Collect data
    E_f = collect("E_f", tind=[1,1], info=False, path="data")
    E_f = E_f[:,2:-2, :,:]
    # Average error over domain
    l2 = sqrt(mean(E_f**2))
    linf = max(abs( E_f ))
    
    error_2.append( l2 )
    error_inf.append( linf )
    
    print("  -> Error norm: l-2 %f l-inf %f" % (l2, linf))
        
    
dx = 1. / array(nxlist)

# Calculate convergence order
    
order = log(error_2[-1] / error_2[-2]) / log(dx[-1] / dx[-2])
print("Convergence order = %f" % (order))

if order < 1.5: # Should be second order accurate
    success = False 

# plot errors
plt.figure()

plt.plot(dx, error_2, '-o', label=r'$l^2$')
plt.plot(dx, error_inf, '-x', label=r'$l^\infty$')
    
plt.plot(dx, error_2[-1]*(dx/dx[-1])**order, '--', label="Order %.1f"%(order))

plt.legend(loc="upper left")
plt.grid()
    
plt.yscale('log')
plt.xscale('log')
        
plt.xlabel(r'Mesh spacing $\delta x$')
plt.ylabel("Error norm")
    
plt.savefig("norm.pdf")

plt.show()
plt.close()

if success:
  print " => All tests passed"
  exit(0)
else:
  print " => Some failed tests"
  exit(1)
